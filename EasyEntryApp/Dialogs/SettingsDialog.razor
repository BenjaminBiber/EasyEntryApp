@using System.Data
@using System.Text.RegularExpressions
@using doorOpener.Models
@using EasyEntryLib.Services
@using Microsoft.AspNetCore.Components.Rendering
@inject ISnackbar Snackbar
@inject SettingService Setting

<MudDialog>
    <TitleContent>
        Einstellungen
    </TitleContent>
    <DialogContent>
        <div style="display: flex; justify-content: center; align-items: center; border: 2px solid var(--mud-palette-primary); margin: 3%; border-radius: 5px">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudText>Meldungen Anzeigen</MudText>
                <MudSwitch @bind-Value="showSnackBar" ThumbIcon="@(showSnackBar == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(showSnackBar == true ? Color.Success : Color.Error)"></MudSwitch>
            </MudStack>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveSetting">Speichern</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
    
    private bool  showSnackBar = true;
    
    protected override async Task OnInitializedAsync()
    {
        showSnackBar = ((await Setting.GetAllAsync()).FirstOrDefault() ?? new Setting()).ShowSnackBar;
    }

    private async Task SaveSetting()
    {
        await Setting.CreateAsync(new Setting(){ShowSnackBar = showSnackBar});
        Submit();
    }
}